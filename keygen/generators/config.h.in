
/** ***************************************************************************
*
*  Copyright 2018 Jose Fernando Lopez Fernandez - All Rights Reserved
*  See the file AUTHORS included with the application distribution for
*  specific information.
*
*  Redistribution and use in source and binary forms, with or without
*  modification, are permitted provided that the following
*  conditions are met:
*
*   * Redistributions of source code must retain the above copyright
*     notice, this list of conditions and the following disclaimer.
*
*   * Redistributions in binary form must reproduce the above
*     copyright notice, this list of conditions and the following
*     disclaimer in the documentation and/or other materials provided
*     with the distribution.
*
*     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
*     CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
*     INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
*     MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
*     CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
*     SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
*     NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
*     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
*     HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
*     CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
*     OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*     EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
*  ***************************************************************************
*
*  @author Jose Fernando Lopez Fernandez
*  @date 19-June-2018
*  @brief This file contains configuration settings for the application.
*
*  Tasks:
*      1. @todo Add file details
*      2. @todo Add file details
*
*  **************************************************************************/

#ifndef KEYGEN_INCLUDE_CONFIG_H_
#define KEYGEN_INCLUDE_CONFIG_H_

#include <iostream>
#include <string>
#include <string_view>

/** CMake Documentation:
 *  CMake Commands [https://cmake.org/cmake/help/v3.11/manual/cmake-commands.7.html]
 *  
 */

namespace System
{
    namespace Host
    {
        /** @todo Add documentation for host system configurations
         *  @brief CMAKE_HOST_WIN32 will be false when running a Cygwin
         *  environment, while CMAKE_HOST_UNIX will be true when the system is
         *  Unix or Unix-like, which includes both Apple and Cygwin.
         *  
         */

        const auto Windows              = "@CMAKE_HOST_WIN32@";
        const auto Apple                = "@CMAKE_HOST_APPLE@";
        const auto Unix                 = "@CMAKE_HOST_UNIX@";

        namespace Processor
        {
            const auto Architecture     = "@CMAKE_HOST_SYSTEM_PROCESSOR@";
        } // namespace Processor
    } // namespace Host

    namespace Toolchains
    {
        namespace Compilers
        {
            namespace C
            {
                const auto Name         = "@CMAKE_C_COMPILER_ID@";
                const auto Version      = "@CMAKE_C_COMPILER_VERSION@";
                const auto Standard     = "@CMAKE_C_STANDARD@";
                const auto StandardReq  = "@CMAKE_C_STANDARD_REQUIRED@";
                const auto Extensions   = "@CMAKE_C_EXTENSIONS@";
                const auto Features     = "@CMAKE_C_COMPILE_FEATURES@";
                const auto FlagsBase    = "@CMAKE_C_COMPILER_FLAGS@";
                const auto FlagsDebug   = "@CMAKE_C_COMPILER_FLAGS_DEBUG@";
                const auto FlagsRelease = "@CMAKE_C_COMPILER_FLAGS_RELEASE@";
                const auto IncludesDir  = "@CMAKE_C_STANDARD_INCLUDE_DIRECTORIES@";
                const auto StandardLib  = "@CMAKE_C_STANDARD_LIBRARIES@";

                inline void Print() noexcept
                {
                    std::cout << "\n";
                    std::cout << "--C Compiler Info--\n";
                    std::cout << "\t" << Name << "\n";
                    std::cout << "\t" << Version << "\n";
                    std::cout << "\t" << Standard << "\n";
                    std::cout << "\t" << StandardReq << "\n";
                    std::cout << "\t" << Extensions << "\n";
                    std::cout << "\t" << Features << "\n";
                    std::cout << "\t" << FlagsBase << "\n";
                    std::cout << "\t" << FlagsDebug << "\n";
                    std::cout << "\t" << FlagsRelease << "\n";
                    std::cout << "\t" << IncludesDir << "\n";
                    std::cout << "\t" << StandardLib << "\n";
                    std::cout << "\n";

                }
            } // namespace C

            namespace CXX
            {
                const auto Name         = "@CMAKE_CXX_COMPILER_ID@";
                const auto Version      = "@CMAKE_CXX_COMPILER_VERSION@";
                const auto Standard     = "@CMAKE_CXX_STANDARD@";
                const auto StandardReq  = "@CMAKE_CXX_STANDARD_REQUIRED@";
                const auto Extensions   = "@CMAKE_CXX_EXTENSIONS@";
                const auto Features     = "@CMAKE_CXX_COMPILE_FEATURES@";
                const auto FlagsBase    = "@CMAKE_CXX_COMPILER_FLAGS@";
                const auto FlagsDebug   = "@CMAKE_CXX_COMPILER_FLAGS_DEBUG@";
                const auto FlagsRelease = "@CMAKE_CXX_COMPILER_FLAGS_RELEASE@";
                const auto IncludesDir  = "@CMAKE_CXX_STANDARD_INCLUDE_DIRECTORIES@";
                const auto StandardLib  = "@CMAKE_CXX_STANDARD_LIBRARIES@";

                inline void Print() noexcept
                {
                    std::cout << "\n";
                    std::cout << "--C Compiler Info--\n";
                    std::cout << "\t" << Name << "\n";
                    std::cout << "\t" << Version << "\n";
                    std::cout << "\t" << Standard << "\n";
                    std::cout << "\t" << StandardReq << "\n";
                    std::cout << "\t" << Extensions << "\n";
                    std::cout << "\t" << Features << "\n";
                    std::cout << "\t" << FlagsBase << "\n";
                    std::cout << "\t" << FlagsDebug << "\n";
                    std::cout << "\t" << FlagsRelease << "\n";
                    std::cout << "\t" << IncludesDir << "\n";
                    std::cout << "\t" << StandardLib << "\n";
                    std::cout << "\n";

                }
            } // namespace CXX
        } // namespace Compilers
    } // namespace Toolchains
} // namespace System

namespace KeyGen
{
    namespace Program
    {
        namespace Metadata
        {
            const std::string description = "@PROJECT_DESCRIPTION@";
        }

        // @todo Change to string_view
        //inline auto Description() noexcept -> decltype (auto)
        //{
        //    return Metadata::description;
        //}

        std::string Description() noexcept
        {
            return Metadata::description;
        }

        inline void PrintDescription() noexcept
        {
            std::cout << "Description: " << Description() << "\n";
        }
    }

    namespace Version
    {
        const std::string Major = "@KeyGen_VERSION_MAJOR@";
        const std::string Minor = "@KeyGen_VERSION_MINOR@";
        const std::string Patch = "@KeyGen_VERSION_PATCH@";
        const std::string Tweak = "@KeyGen_VERSION_TWEAK@";

        inline std::string String() noexcept
        {
            return (Major + "." + Minor + "." + Patch + "." + Tweak);
        }

        inline void Print() noexcept
        {
            std::cout << "Version: " << KeyGen::Version::String() << "\n";
        }
    } // namespace Version
} // namespace KeyGen

#endif // KEYGEN_INCLUDE_CONFIG_H_
